openapi: 3.0.1
info:
  title: Confluent Schema Registry
  version: v1
servers:
- url: /
paths:
  /:
    get:
      description: The Root resource is a no-op.
      operationId: get
      responses:
        200:
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                additionalProperties:
                  properties: {}
                  type: object
                type: object
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                additionalProperties:
                  properties: {}
                  type: object
                type: object
            application/json; qs=0.5:
              schema:
                additionalProperties:
                  properties: {}
                  type: object
                type: object
          description: successful operation
      summary: Schema Registry Root Resource
    post:
      operationId: post
      responses:
        200:
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                additionalProperties:
                  type: string
                type: object
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                additionalProperties:
                  type: string
                type: object
            application/json; qs=0.5:
              schema:
                additionalProperties:
                  type: string
                type: object
          description: successful operation
  /compatibility/subjects/{subject}/versions/{version}:
    post:
      description: 'the compatibility level applied for the check is the configured
        compatibility level for the subject (http:get:: /config/(string: subject)).
        If this subject''s compatibility level was never changed, then the global
        compatibility level applies (http:get:: /config).'
      operationId: testCompatibilityBySubjectName
      parameters:
      - in: header
        name: Content-Type
        schema:
          type: string
      - in: header
        name: Accept
        schema:
          type: string
      - description: Subject of the schema version against which compatibility is
          to be tested
        in: path
        name: subject
        required: true
        schema:
          type: string
      - description: Version of the subject's schema against which compatibility is
          to be tested. Valid values for versionId are between [1,2^31-1] or the string
          "latest"."latest" checks compatibility of the input schema with the last
          registered schema under the specified subject
        in: path
        name: version
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/vnd.schemaregistry.v1+json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/vnd.schemaregistry+json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
        description: Schema
        required: true
      responses:
        200:
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/CompatibilityCheckResponse'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/CompatibilityCheckResponse'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/CompatibilityCheckResponse'
          description: successful operation
        404:
          content: {}
          description: |-
            Error code 40401 -- Subject not found
            Error code 40402 -- Version not found
        422:
          content: {}
          description: |-
            Error code 42201 -- Invalid Avro schema
            Error code 42202 -- Invalid version
        500:
          content: {}
          description: Error code 50001 -- Error in the backend data store
      summary: Test input schema against a particular version of a subject's schema
        for compatibility.
      x-codegen-request-body-name: body
  /config:
    get:
      operationId: getTopLevelConfig
      responses:
        200:
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/Config'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/Config'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/Config'
          description: successful operation
        500:
          content: {}
          description: Error code 50001 -- Error in the backend data store
      summary: Get global compatibility level.
    put:
      operationId: updateTopLevelConfig
      requestBody:
        content:
          application/vnd.schemaregistry.v1+json:
            schema:
              $ref: '#/components/schemas/ConfigUpdateRequest'
          application/vnd.schemaregistry+json:
            schema:
              $ref: '#/components/schemas/ConfigUpdateRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigUpdateRequest'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/ConfigUpdateRequest'
        description: Config Update Request
        required: true
      responses:
        200:
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ConfigUpdateRequest'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ConfigUpdateRequest'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ConfigUpdateRequest'
          description: successful operation
        422:
          content: {}
          description: Error code 42203 -- Invalid compatibility level
        500:
          content: {}
          description: |
            Error code 50001 -- Error in the backend data store
            Error code 50003 -- Error while forwarding the request to the primary
      summary: Update global compatibility level.
      x-codegen-request-body-name: body
  /config/{subject}:
    get:
      operationId: getSubjectLevelConfig
      parameters:
      - in: path
        name: subject
        required: true
        schema:
          type: string
      - in: query
        name: defaultToGlobal
        schema:
          type: boolean
      responses:
        200:
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/Config'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/Config'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/Config'
          description: successful operation
        404:
          content: {}
          description: Subject not found
        500:
          content: {}
          description: Error code 50001 -- Error in the backend data store
      summary: Get compatibility level for a subject.
    put:
      operationId: updateSubjectLevelConfig
      parameters:
      - description: Name of the Subject
        in: path
        name: subject
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/vnd.schemaregistry.v1+json:
            schema:
              $ref: '#/components/schemas/ConfigUpdateRequest'
          application/vnd.schemaregistry+json:
            schema:
              $ref: '#/components/schemas/ConfigUpdateRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigUpdateRequest'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/ConfigUpdateRequest'
        description: Config Update Request
        required: true
      responses:
        200:
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ConfigUpdateRequest'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ConfigUpdateRequest'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ConfigUpdateRequest'
          description: successful operation
        422:
          content: {}
          description: |-
            Error code 42203 -- Invalid compatibility level
            Error code 40402 -- Version not found
        500:
          content: {}
          description: |-
            Error code 50001 -- Error in the backend data store
            Error code 50003 -- Error while forwarding the request to the primary
      summary: Update compatibility level for the specified subject.
      x-codegen-request-body-name: body
  /mode:
    get:
      operationId: getTopLevelMode
      responses:
        200:
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ModeGetResponse'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ModeGetResponse'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ModeGetResponse'
          description: successful operation
    put:
      operationId: updateTopLevelMode
      requestBody:
        content:
          application/vnd.schemaregistry.v1+json:
            schema:
              $ref: '#/components/schemas/ModeUpdateRequest'
          application/vnd.schemaregistry+json:
            schema:
              $ref: '#/components/schemas/ModeUpdateRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ModeUpdateRequest'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/ModeUpdateRequest'
        description: Update Request
        required: true
      responses:
        200:
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ModeUpdateRequest'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ModeUpdateRequest'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ModeUpdateRequest'
          description: successful operation
      x-codegen-request-body-name: body
  /mode/{subject}:
    get:
      operationId: getMode
      parameters:
      - in: path
        name: subject
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ModeGetResponse'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ModeGetResponse'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ModeGetResponse'
          description: successful operation
    put:
      operationId: updateMode
      parameters:
      - in: path
        name: subject
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/vnd.schemaregistry.v1+json:
            schema:
              $ref: '#/components/schemas/ModeUpdateRequest'
          application/vnd.schemaregistry+json:
            schema:
              $ref: '#/components/schemas/ModeUpdateRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ModeUpdateRequest'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/ModeUpdateRequest'
        description: Update Request
        required: true
      responses:
        200:
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ModeUpdateRequest'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ModeUpdateRequest'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ModeUpdateRequest'
          description: successful operation
      x-codegen-request-body-name: body
  /schemas/ids/{id}:
    get:
      operationId: getSchema
      parameters:
      - description: Globally unique identifier of the schema
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
      - in: query
        name: fetchMaxId
        schema:
          default: false
          type: boolean
      responses:
        200:
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/SchemaString'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/SchemaString'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/SchemaString'
          description: successful operation
        404:
          content: {}
          description: |
            Error code 40403 -- Schema not found
        500:
          content: {}
          description: |
            Error code 50001 -- Error in the backend data store
      summary: Get the schema string identified by the input ID.
  /schemas/ids/{id}/subjects:
    get:
      operationId: getSubjects
      parameters:
      - description: Globally unique identifier of the schema
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
      responses:
        200:
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                items:
                  type: string
                type: array
                uniqueItems: true
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                items:
                  type: string
                type: array
                uniqueItems: true
            application/json; qs=0.5:
              schema:
                items:
                  type: string
                type: array
                uniqueItems: true
          description: successful operation
        404:
          content: {}
          description: |
            Error code 40403 -- Schema not found
        500:
          content: {}
          description: |
            Error code 50001 -- Error in the backend data store
      summary: Get all the subjects associated with the input ID.
  /subjects:
    get:
      operationId: list
      responses:
        200:
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                items:
                  type: string
                type: array
                uniqueItems: true
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                items:
                  type: string
                type: array
                uniqueItems: true
            application/json; qs=0.5:
              schema:
                items:
                  type: string
                type: array
                uniqueItems: true
          description: successful operation
        500:
          content: {}
          description: Error code 50001 -- Error in the backend datastore
      summary: Get a list of registered subjects.
  /subjects/{subject}:
    delete:
      operationId: deleteSubject
      parameters:
      - description: the name of the subject
        in: path
        name: subject
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                items:
                  format: int32
                  type: integer
                type: array
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                items:
                  format: int32
                  type: integer
                type: array
            application/json; qs=0.5:
              schema:
                items:
                  format: int32
                  type: integer
                type: array
          description: successful operation
        404:
          content: {}
          description: Error code 40401 -- Subject not found
        500:
          content: {}
          description: Error code 50001 -- Error in the backend datastore
      summary: Deletes the specified subject and its associated compatibility level
        if registered. It is recommended to use this API only when a topic needs to
        be recycled or in development environment.
    post:
      operationId: lookUpSchemaUnderSubject
      parameters:
      - description: Subject under which the schema will be registered
        in: path
        name: subject
        required: true
        schema:
          type: string
      - in: query
        name: deleted
        schema:
          type: boolean
      requestBody:
        content:
          application/vnd.schemaregistry.v1+json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/vnd.schemaregistry+json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
        description: Schema
        required: true
      responses:
        404:
          content: {}
          description: |-
            Error code 40401 -- Subject not found
            Error code 40403 -- Schema not found
        500:
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/Schema'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/Schema'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/Schema'
          description: Internal server error
      summary: Check if a schema has already been registered under the specified subject.
        If so, this returns the schema string along with its globally unique identifier,
        its version under this subject and the subject name.
      x-codegen-request-body-name: body
  /subjects/{subject}/versions:
    get:
      operationId: listVersions
      parameters:
      - description: Name of the Subject
        in: path
        name: subject
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                items:
                  format: int32
                  type: integer
                type: array
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                items:
                  format: int32
                  type: integer
                type: array
            application/json; qs=0.5:
              schema:
                items:
                  format: int32
                  type: integer
                type: array
          description: successful operation
        404:
          content: {}
          description: Error code 40401 -- Subject not found
        500:
          content: {}
          description: Error code 50001 -- Error in the backend data store
      summary: Get a list of versions registered under the specified subject.
    post:
      operationId: register
      parameters:
      - description: Name of the Subject
        in: path
        name: subject
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/vnd.schemaregistry.v1+json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/vnd.schemaregistry+json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
        description: Schema
        required: true
      responses:
        200:
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/RegisterSchemaResponse'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/RegisterSchemaResponse'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/RegisterSchemaResponse'
          description: successful operation
        409:
          content: {}
          description: Incompatible Avro schema
        422:
          content: {}
          description: Error code 42201 -- Invalid Avro schema
        500:
          content: {}
          description: |-
            Error code 50001 -- Error in the backend data store
            Error code 50002 -- Operation timed out
            Error code 50003 -- Error while forwarding the request to the primary
      summary: |-
        Register a new schema under the specified subject. If successfully registered, this returns the unique identifier of this schema in the registry. The returned identifier should be used to retrieve this schema from the schemas resource and is different from the schema's version which is associated with the subject. If the same schema is registered under a different subject, the same identifier will be returned. However, the version of the schema may be different under different subjects.
        A schema should be compatible with the previously registered schema or schemas (if there are any) as per the configured compatibility level. The configured compatibility level can be obtained by issuing a GET http:get:: /config/(string: subject). If that returns null, then GET http:get:: /config
        When there are multiple instances of Schema Registry running in the same cluster, the schema registration request will be forwarded to one of the instances designated as the primary. If the primary is not available, the client will get an error code indicating that the forwarding has failed.
      x-codegen-request-body-name: body
  /subjects/{subject}/versions/{version}:
    delete:
      operationId: deleteSchemaVersion
      parameters:
      - description: Name of the Subject
        in: path
        name: subject
        required: true
        schema:
          type: string
      - description: Version of the schema to be returned. Valid values for versionId
          are between [1,2^31-1] or the string "latest". "latest" returns the last
          registered schema under the specified subject. Note that there may be a
          new latest schema that gets registered right after this request is served.
        in: path
        name: version
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                format: int32
                type: integer
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                format: int32
                type: integer
            application/json; qs=0.5:
              schema:
                format: int32
                type: integer
          description: successful operation
        404:
          content: {}
          description: |-
            Error code 40401 -- Subject not found
            Error code 40402 -- Version not found
        422:
          content: {}
          description: Error code 42202 -- Invalid version
        500:
          content: {}
          description: Error code 50001 -- Error in the backend data store
      summary: Deletes a specific version of the schema registered under this subject.
        This only deletes the version and the schema ID remains intact making it still
        possible to decode data using the schema ID. This API is recommended to be
        used only in development environments or under extreme circumstances where-in,
        its required to delete a previously registered schema for compatibility purposes
        or re-register previously registered schema.
    get:
      operationId: getSchemaByVersion
      parameters:
      - description: Name of the Subject
        in: path
        name: subject
        required: true
        schema:
          type: string
      - description: Version of the schema to be returned. Valid values for versionId
          are between [1,2^31-1] or the string "latest". "latest" returns the last
          registered schema under the specified subject. Note that there may be a
          new latest schema that gets registered right after this request is served.
        in: path
        name: version
        required: true
        schema:
          type: string
      - in: query
        name: deleted
        schema:
          type: boolean
      responses:
        200:
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/Schema'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/Schema'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/Schema'
          description: successful operation
        404:
          content: {}
          description: |-
            Error code 40401 -- Subject not found
            Error code 40402 -- Version not found
        422:
          content: {}
          description: Error code 42202 -- Invalid version
        500:
          content: {}
          description: Error code 50001 -- Error in the backend data store
      summary: Get a specific version of the schema registered under this subject.
  /subjects/{subject}/versions/{version}/schema:
    get:
      operationId: getSchemaOnly
      parameters:
      - description: Name of the Subject
        in: path
        name: subject
        required: true
        schema:
          type: string
      - description: Version of the schema to be returned. Valid values for versionId
          are between [1,2^31-1] or the string "latest". "latest" returns the last
          registered schema under the specified subject. Note that there may be a
          new latest schema that gets registered right after this request is served.
        in: path
        name: version
        required: true
        schema:
          type: string
      - in: query
        name: deleted
        schema:
          type: boolean
      responses:
        200:
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                type: string
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                type: string
            application/json; qs=0.5:
              schema:
                type: string
          description: successful operation
        404:
          content: {}
          description: |-
            Error code 40401 -- Subject not found
            Error code 40402 -- Version not found
        422:
          content: {}
          description: Error code 42202 -- Invalid version
        500:
          content: {}
          description: Error code 50001 -- Error in the backend data store
      summary: Get the avro schema for the specified version of this subject. The
        unescaped schema only is returned.
  /v1/metadata/id:
    get:
      operationId: getClusterId
      responses:
        200:
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ServerClusterId'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ServerClusterId'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ServerClusterId'
          description: successful operation
        500:
          content: {}
          description: |
            Error code 50001 -- Error in the backend data store
      summary: Get the server metadata
components:
  schemas:
    CompatibilityCheckResponse:
      example:
        is_compatible: true
      properties:
        is_compatible:
          type: boolean
      type: object
    Config:
      example:
        compatibilityLevel: BACKWARD
      properties:
        compatibilityLevel:
          description: Compatability Level
          enum:
          - BACKWARD
          - BACKWARD_TRANSITIVE
          - FORWARD
          - FORWARD_TRANSITIVE
          - FULL
          - FULL_TRANSITIVE
          - NONE
          type: string
      type: object
    ConfigUpdateRequest:
      example:
        compatibility: BACKWARD
      properties:
        compatibility:
          description: Compatability Level
          enum:
          - BACKWARD
          - BACKWARD_TRANSITIVE
          - FORWARD
          - FORWARD_TRANSITIVE
          - FULL
          - FULL_TRANSITIVE
          - NONE
          type: string
      type: object
    ModeGetResponse:
      example:
        mode: mode
      properties:
        mode:
          type: string
      type: object
    ModeUpdateRequest:
      example:
        mode: mode
      properties:
        mode:
          type: string
      type: object
    RegisterSchemaRequest:
      example:
        schema: schema
        references:
        - subject: subject
          name: name
          version: 1
        - subject: subject
          name: name
          version: 1
        schemaType: schemaType
        id: 6
        version: 0
      properties:
        version:
          format: int32
          type: integer
        id:
          format: int32
          type: integer
        schemaType:
          type: string
        references:
          items:
            $ref: '#/components/schemas/SchemaReference'
          type: array
        schema:
          type: string
      type: object
    RegisterSchemaResponse:
      example:
        id: 0
      properties:
        id:
          format: int32
          type: integer
      type: object
    Schema:
      example:
        schema: schema
        references:
        - subject: subject
          name: name
          version: 1
        - subject: subject
          name: name
          version: 1
        subject: subject
        schemaType: schemaType
        id: 6
        version: 0
      properties:
        subject:
          type: string
        version:
          format: int32
          type: integer
        id:
          format: int32
          type: integer
        schemaType:
          type: string
        references:
          items:
            $ref: '#/components/schemas/SchemaReference'
          type: array
        schema:
          type: string
      type: object
    SchemaReference:
      example:
        subject: subject
        name: name
        version: 1
      properties:
        name:
          type: string
        subject:
          type: string
        version:
          format: int32
          minimum: 1
          type: integer
      type: object
    SchemaString:
      example:
        schema: schema
        maxId: 0
        references:
        - subject: subject
          name: name
          version: 1
        - subject: subject
          name: name
          version: 1
        schemaType: schemaType
      properties:
        schemaType:
          description: Schema type
          type: string
        schema:
          description: Schema string identified by the ID
          type: string
        references:
          description: Schema references
          items:
            $ref: '#/components/schemas/SchemaReference'
          type: array
        maxId:
          description: Maximum ID
          format: int32
          type: integer
      type: object
    ServerClusterId:
      example:
        scope:
          key: '{}'
        id: id
      properties:
        scope:
          additionalProperties:
            properties: {}
            type: object
          readOnly: true
          type: object
        id:
          type: string
      type: object
