/*
 * Confluent Schema Registry
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ServerClusterId struct for ServerClusterId
type ServerClusterId struct {
	Scope *map[string]map[string]interface{} `json:"scope,omitempty"`
	Id *string `json:"id,omitempty"`
}

// NewServerClusterId instantiates a new ServerClusterId object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerClusterId() *ServerClusterId {
	this := ServerClusterId{}
	return &this
}

// NewServerClusterIdWithDefaults instantiates a new ServerClusterId object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerClusterIdWithDefaults() *ServerClusterId {
	this := ServerClusterId{}
	return &this
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *ServerClusterId) GetScope() map[string]map[string]interface{} {
	if o == nil || o.Scope == nil {
		var ret map[string]map[string]interface{}
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerClusterId) GetScopeOk() (*map[string]map[string]interface{}, bool) {
	if o == nil || o.Scope == nil {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *ServerClusterId) HasScope() bool {
	if o != nil && o.Scope != nil {
		return true
	}

	return false
}

// SetScope gets a reference to the given map[string]map[string]interface{} and assigns it to the Scope field.
func (o *ServerClusterId) SetScope(v map[string]map[string]interface{}) {
	o.Scope = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ServerClusterId) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerClusterId) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ServerClusterId) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ServerClusterId) SetId(v string) {
	o.Id = &v
}

func (o ServerClusterId) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Scope != nil {
		toSerialize["scope"] = o.Scope
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	return json.Marshal(toSerialize)
}

type NullableServerClusterId struct {
	value *ServerClusterId
	isSet bool
}

func (v NullableServerClusterId) Get() *ServerClusterId {
	return v.value
}

func (v *NullableServerClusterId) Set(val *ServerClusterId) {
	v.value = val
	v.isSet = true
}

func (v NullableServerClusterId) IsSet() bool {
	return v.isSet
}

func (v *NullableServerClusterId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerClusterId(val *ServerClusterId) *NullableServerClusterId {
	return &NullableServerClusterId{value: val, isSet: true}
}

func (v NullableServerClusterId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerClusterId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


