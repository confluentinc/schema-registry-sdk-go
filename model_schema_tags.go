// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Confluent Schema Registry

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schemaregistry

import (
	"bytes"
	"encoding/json"
)

import (
	"reflect"
)

// SchemaTags struct for SchemaTags
type SchemaTags struct {
	SchemaEntity *SchemaEntity `json:"schemaEntity,omitempty"`
	Tags *[]string `json:"tags,omitempty"`
}

// NewSchemaTags instantiates a new SchemaTags object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemaTags() *SchemaTags {
	this := SchemaTags{}
	return &this
}

// NewSchemaTagsWithDefaults instantiates a new SchemaTags object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaTagsWithDefaults() *SchemaTags {
	this := SchemaTags{}
	return &this
}

// GetSchemaEntity returns the SchemaEntity field value if set, zero value otherwise.
func (o *SchemaTags) GetSchemaEntity() SchemaEntity {
	if o == nil || o.SchemaEntity == nil {
		var ret SchemaEntity
		return ret
	}
	return *o.SchemaEntity
}

// GetSchemaEntityOk returns a tuple with the SchemaEntity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaTags) GetSchemaEntityOk() (*SchemaEntity, bool) {
	if o == nil || o.SchemaEntity == nil {
		return nil, false
	}
	return o.SchemaEntity, true
}

// HasSchemaEntity returns a boolean if a field has been set.
func (o *SchemaTags) HasSchemaEntity() bool {
	if o != nil && o.SchemaEntity != nil {
		return true
	}

	return false
}

// SetSchemaEntity gets a reference to the given SchemaEntity and assigns it to the SchemaEntity field.
func (o *SchemaTags) SetSchemaEntity(v SchemaEntity) {
	o.SchemaEntity = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *SchemaTags) GetTags() []string {
	if o == nil || o.Tags == nil {
		var ret []string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaTags) GetTagsOk() (*[]string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *SchemaTags) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *SchemaTags) SetTags(v []string) {
	o.Tags = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *SchemaTags) Redact() {
    o.recurseRedact(o.SchemaEntity)
    o.recurseRedact(o.Tags)
}

func (o *SchemaTags) recurseRedact(v interface{}) {
    type redactor interface {
        Redact()
    }
    if r, ok := v.(redactor); ok {
        r.Redact()
    } else {
        val := reflect.ValueOf(v)
        if val.Kind() == reflect.Ptr {
            val = val.Elem()
        }
        switch val.Kind() {
        case reflect.Slice, reflect.Array:
            for i := 0; i < val.Len(); i++ {
                // support data types declared without pointers
                o.recurseRedact(val.Index(i).Interface())
                // ... and data types that were declared without but need pointers (for Redact)
                if val.Index(i).CanAddr() {
                    o.recurseRedact(val.Index(i).Addr().Interface())
                }
            }
        }
    }
}

func (o SchemaTags) zeroField(v interface{}) {
    p := reflect.ValueOf(v).Elem()
    p.Set(reflect.Zero(p.Type()))
}

func (o SchemaTags) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SchemaEntity != nil {
		toSerialize["schemaEntity"] = o.SchemaEntity
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullableSchemaTags struct {
	value *SchemaTags
	isSet bool
}

func (v NullableSchemaTags) Get() *SchemaTags {
	return v.value
}

func (v *NullableSchemaTags) Set(val *SchemaTags) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaTags) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaTags) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaTags(val *SchemaTags) *NullableSchemaTags {
	return &NullableSchemaTags{value: val, isSet: true}
}

func (v NullableSchemaTags) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableSchemaTags) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


