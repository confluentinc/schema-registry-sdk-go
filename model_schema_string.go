/*
 * Confluent Schema Registry
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SchemaString struct for SchemaString
type SchemaString struct {
	// Schema type
	SchemaType *string `json:"schemaType,omitempty"`
	// Schema string identified by the ID
	Schema *string `json:"schema,omitempty"`
	// Schema references
	References *[]SchemaReference `json:"references,omitempty"`
	// Maximum ID
	MaxId *int32 `json:"maxId,omitempty"`
}

// NewSchemaString instantiates a new SchemaString object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemaString() *SchemaString {
	this := SchemaString{}
	return &this
}

// NewSchemaStringWithDefaults instantiates a new SchemaString object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaStringWithDefaults() *SchemaString {
	this := SchemaString{}
	return &this
}

// GetSchemaType returns the SchemaType field value if set, zero value otherwise.
func (o *SchemaString) GetSchemaType() string {
	if o == nil || o.SchemaType == nil {
		var ret string
		return ret
	}
	return *o.SchemaType
}

// GetSchemaTypeOk returns a tuple with the SchemaType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaString) GetSchemaTypeOk() (*string, bool) {
	if o == nil || o.SchemaType == nil {
		return nil, false
	}
	return o.SchemaType, true
}

// HasSchemaType returns a boolean if a field has been set.
func (o *SchemaString) HasSchemaType() bool {
	if o != nil && o.SchemaType != nil {
		return true
	}

	return false
}

// SetSchemaType gets a reference to the given string and assigns it to the SchemaType field.
func (o *SchemaString) SetSchemaType(v string) {
	o.SchemaType = &v
}

// GetSchema returns the Schema field value if set, zero value otherwise.
func (o *SchemaString) GetSchema() string {
	if o == nil || o.Schema == nil {
		var ret string
		return ret
	}
	return *o.Schema
}

// GetSchemaOk returns a tuple with the Schema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaString) GetSchemaOk() (*string, bool) {
	if o == nil || o.Schema == nil {
		return nil, false
	}
	return o.Schema, true
}

// HasSchema returns a boolean if a field has been set.
func (o *SchemaString) HasSchema() bool {
	if o != nil && o.Schema != nil {
		return true
	}

	return false
}

// SetSchema gets a reference to the given string and assigns it to the Schema field.
func (o *SchemaString) SetSchema(v string) {
	o.Schema = &v
}

// GetReferences returns the References field value if set, zero value otherwise.
func (o *SchemaString) GetReferences() []SchemaReference {
	if o == nil || o.References == nil {
		var ret []SchemaReference
		return ret
	}
	return *o.References
}

// GetReferencesOk returns a tuple with the References field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaString) GetReferencesOk() (*[]SchemaReference, bool) {
	if o == nil || o.References == nil {
		return nil, false
	}
	return o.References, true
}

// HasReferences returns a boolean if a field has been set.
func (o *SchemaString) HasReferences() bool {
	if o != nil && o.References != nil {
		return true
	}

	return false
}

// SetReferences gets a reference to the given []SchemaReference and assigns it to the References field.
func (o *SchemaString) SetReferences(v []SchemaReference) {
	o.References = &v
}

// GetMaxId returns the MaxId field value if set, zero value otherwise.
func (o *SchemaString) GetMaxId() int32 {
	if o == nil || o.MaxId == nil {
		var ret int32
		return ret
	}
	return *o.MaxId
}

// GetMaxIdOk returns a tuple with the MaxId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaString) GetMaxIdOk() (*int32, bool) {
	if o == nil || o.MaxId == nil {
		return nil, false
	}
	return o.MaxId, true
}

// HasMaxId returns a boolean if a field has been set.
func (o *SchemaString) HasMaxId() bool {
	if o != nil && o.MaxId != nil {
		return true
	}

	return false
}

// SetMaxId gets a reference to the given int32 and assigns it to the MaxId field.
func (o *SchemaString) SetMaxId(v int32) {
	o.MaxId = &v
}

func (o SchemaString) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SchemaType != nil {
		toSerialize["schemaType"] = o.SchemaType
	}
	if o.Schema != nil {
		toSerialize["schema"] = o.Schema
	}
	if o.References != nil {
		toSerialize["references"] = o.References
	}
	if o.MaxId != nil {
		toSerialize["maxId"] = o.MaxId
	}
	return json.Marshal(toSerialize)
}

type NullableSchemaString struct {
	value *SchemaString
	isSet bool
}

func (v NullableSchemaString) Get() *SchemaString {
	return v.value
}

func (v *NullableSchemaString) Set(val *SchemaString) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaString) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaString) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaString(val *SchemaString) *NullableSchemaString {
	return &NullableSchemaString{value: val, isSet: true}
}

func (v NullableSchemaString) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaString) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


