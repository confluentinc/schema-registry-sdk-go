/*
 * Confluent Schema Registry
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UpdateExporterRequest struct for UpdateExporterRequest
type UpdateExporterRequest struct {
	Subjects *[]string `json:"subjects,omitempty"`
	ContextType *string `json:"contextType,omitempty"`
	Context *string `json:"context,omitempty"`
	SubjectRenameFormat *string `json:"subjectRenameFormat,omitempty"`
	Config *map[string]string `json:"config,omitempty"`
}

// NewUpdateExporterRequest instantiates a new UpdateExporterRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateExporterRequest() *UpdateExporterRequest {
	this := UpdateExporterRequest{}
	return &this
}

// NewUpdateExporterRequestWithDefaults instantiates a new UpdateExporterRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateExporterRequestWithDefaults() *UpdateExporterRequest {
	this := UpdateExporterRequest{}
	return &this
}

// GetSubjects returns the Subjects field value if set, zero value otherwise.
func (o *UpdateExporterRequest) GetSubjects() []string {
	if o == nil || o.Subjects == nil {
		var ret []string
		return ret
	}
	return *o.Subjects
}

// GetSubjectsOk returns a tuple with the Subjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateExporterRequest) GetSubjectsOk() (*[]string, bool) {
	if o == nil || o.Subjects == nil {
		return nil, false
	}
	return o.Subjects, true
}

// HasSubjects returns a boolean if a field has been set.
func (o *UpdateExporterRequest) HasSubjects() bool {
	if o != nil && o.Subjects != nil {
		return true
	}

	return false
}

// SetSubjects gets a reference to the given []string and assigns it to the Subjects field.
func (o *UpdateExporterRequest) SetSubjects(v []string) {
	o.Subjects = &v
}

// GetContextType returns the ContextType field value if set, zero value otherwise.
func (o *UpdateExporterRequest) GetContextType() string {
	if o == nil || o.ContextType == nil {
		var ret string
		return ret
	}
	return *o.ContextType
}

// GetContextTypeOk returns a tuple with the ContextType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateExporterRequest) GetContextTypeOk() (*string, bool) {
	if o == nil || o.ContextType == nil {
		return nil, false
	}
	return o.ContextType, true
}

// HasContextType returns a boolean if a field has been set.
func (o *UpdateExporterRequest) HasContextType() bool {
	if o != nil && o.ContextType != nil {
		return true
	}

	return false
}

// SetContextType gets a reference to the given string and assigns it to the ContextType field.
func (o *UpdateExporterRequest) SetContextType(v string) {
	o.ContextType = &v
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *UpdateExporterRequest) GetContext() string {
	if o == nil || o.Context == nil {
		var ret string
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateExporterRequest) GetContextOk() (*string, bool) {
	if o == nil || o.Context == nil {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *UpdateExporterRequest) HasContext() bool {
	if o != nil && o.Context != nil {
		return true
	}

	return false
}

// SetContext gets a reference to the given string and assigns it to the Context field.
func (o *UpdateExporterRequest) SetContext(v string) {
	o.Context = &v
}

// GetSubjectRenameFormat returns the SubjectRenameFormat field value if set, zero value otherwise.
func (o *UpdateExporterRequest) GetSubjectRenameFormat() string {
	if o == nil || o.SubjectRenameFormat == nil {
		var ret string
		return ret
	}
	return *o.SubjectRenameFormat
}

// GetSubjectRenameFormatOk returns a tuple with the SubjectRenameFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateExporterRequest) GetSubjectRenameFormatOk() (*string, bool) {
	if o == nil || o.SubjectRenameFormat == nil {
		return nil, false
	}
	return o.SubjectRenameFormat, true
}

// HasSubjectRenameFormat returns a boolean if a field has been set.
func (o *UpdateExporterRequest) HasSubjectRenameFormat() bool {
	if o != nil && o.SubjectRenameFormat != nil {
		return true
	}

	return false
}

// SetSubjectRenameFormat gets a reference to the given string and assigns it to the SubjectRenameFormat field.
func (o *UpdateExporterRequest) SetSubjectRenameFormat(v string) {
	o.SubjectRenameFormat = &v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *UpdateExporterRequest) GetConfig() map[string]string {
	if o == nil || o.Config == nil {
		var ret map[string]string
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateExporterRequest) GetConfigOk() (*map[string]string, bool) {
	if o == nil || o.Config == nil {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *UpdateExporterRequest) HasConfig() bool {
	if o != nil && o.Config != nil {
		return true
	}

	return false
}

// SetConfig gets a reference to the given map[string]string and assigns it to the Config field.
func (o *UpdateExporterRequest) SetConfig(v map[string]string) {
	o.Config = &v
}

func (o UpdateExporterRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Subjects != nil {
		toSerialize["subjects"] = o.Subjects
	}
	if o.ContextType != nil {
		toSerialize["contextType"] = o.ContextType
	}
	if o.Context != nil {
		toSerialize["context"] = o.Context
	}
	if o.SubjectRenameFormat != nil {
		toSerialize["subjectRenameFormat"] = o.SubjectRenameFormat
	}
	if o.Config != nil {
		toSerialize["config"] = o.Config
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateExporterRequest struct {
	value *UpdateExporterRequest
	isSet bool
}

func (v NullableUpdateExporterRequest) Get() *UpdateExporterRequest {
	return v.value
}

func (v *NullableUpdateExporterRequest) Set(val *UpdateExporterRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateExporterRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateExporterRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateExporterRequest(val *UpdateExporterRequest) *NullableUpdateExporterRequest {
	return &NullableUpdateExporterRequest{value: val, isSet: true}
}

func (v NullableUpdateExporterRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateExporterRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


